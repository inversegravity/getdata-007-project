mean(iris[iris$Species=='virginica', 'Sepal.Length'])
mean(iris[, 'Sepal.Length'])
apply(iris, 1, mean)
str(iris)
apply(iris[, 1:4], 2, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
str(mtcars)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
str(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
82.63636 - 209.21429
debug(ls)
ls
debug(makeCacheSolve)
makeCacheSolve(x)
q
quit
exit
q
x
quit()
exit()
ls
debug(ls)
ls
?ls
Q
quit()
ls
library(datasets)
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
set.seed(1234)
x <- data.frame(id=1:5, value=sample(20:30, 5, replace=T), year=3)
y <- data.frame(id=1:5, value=sample(10:19, 5, replace=T), year=2)
z <- data.frame(id=1:5, value=sample(0:9, 5, replace=T), year=1)
(df <- rbind(x, y, z))set.seed(1234)
x <- data.frame(id=1:5, value=sample(20:30, 5, replace=T), year=3)
y <- data.frame(id=1:5, value=sample(10:19, 5, replace=T), year=2)
z <- data.frame(id=1:5, value=sample(0:9, 5, replace=T), year=1)
(df <- rbind(x, y, z))
(df <- rbind(x, y, z))
df <- rbind(x, y, z)
(df <- df[order(df$id, df$year), ])
(sdf <-split(df, df$id))
as.vector(sapply(seq_along(sdf), function(x) diff(c(0, sdf[[x]][,2]))))
df$diff <- as.vector(sapply(seq_along(sdf), function(x) diff(c(0, sdf[[x]][,2]))))
df[order(as.numeric(rownames(df))),]
seq_along(sdf)
as.vector(sapply(seq_along(sdf), function(x) diff(c(0, sdf[[x]][,2]))))
as.vector(sapply(seq_along(sdf), function(x) diff(c(0, sdf[[x]][,"value"]))))
(df <- rbind(x, y, z))
set.seed(1234)
x <- data.frame(id=1:5, value=sample(20:30, 5, replace=T), year=3)
y <- data.frame(id=1:5, value=sample(10:19, 5, replace=T), year=2)
z <- data.frame(id=1:5, value=sample(0:9, 5, replace=T), year=1)
(df <- rbind(x, y, z))
as.vector(sapply(seq_along(sdf), function(x) diff(c(0, sdf[[x]][, "value"]))))
(df <- df[order(df$id, df$year), ])
(sdf <-split(df, df$id))
as.vector(sapply(seq_along(sdf), function(x) diff(c(0, sdf[[x]][, "value"]))))
as.vector(sapply(seq_along(sdf), function(x) diff(sdf[[x]][, "value"]))))
as.vector(sapply(seq_along(sdf), function(x) diff(sdf[[x]][, "value"]))))
as.vector(sapply(seq_along(sdf), function(x) diff(sdf[[x]][, "value"])))
(df <- rbind(x, y, z))
sdf
df
?tail
letters
tail(letters, -1)
head(letters, -1)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
ls()
rm(list=ls())
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
bye()
data(iris)
dim(iris)
write.table(iris, file="iris.txt", row.names=FALSE) # has headers in top row
library(data.table)
a = fread("iris.txt")
dim(a)
b = read.table("iris.txt", header=TRUE)
identical(a,b)
class(a)
class(b)
head(a)
head(b)
swirl()
library(swirl)
swirl()
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.1.1", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_ox == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, i:p_id)
cran2 <- select(cran, "i":"p_id")
cran2 <- select(cran, i:ip_id)
cran2 <- select(cran, "i":"ip_id")
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, -ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran,ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
rm(list=ls())
swirl()
library(swirl)
rm(list=ls())
swirl()
install.packages("codetools")
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
q()
swirl()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(by_package, count > 679)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library("swirl")
rm(list=ls())
library("swirl")
swirl()
library(tidyr)
students
?gather
gather(students, sex, count,
| -grade)
gather(students, sex, count,
-grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
View(students2)
submit()
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
select(students4, id, class, midterm, final)
submit()
passed
failed
mutate(passed, status="passed")
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
rbind_list(passed, failed)
sat
sat %>%
select(-contains(total)) %>%
gather(part_sex, count, -score_range) %>%
### <Your call to separate()> %>%
#separate( ) %>%
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
### <Your call to separate()> %>%
#separate( ) %>%
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
### <Your call to separate()> %>%
#separate(part_sex ) %>%
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
### <Your call to separate()> %>%
#separate(part_sex, part, sex ) %>%
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
### <Your call to separate()> %>%
separate(part_sex, c( part, sex) ) %>%
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
### <Your call to separate()> %>%
separate(part_sex, c("part", "sex") ) %>%
print
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
### <Your call to group_by()> %>%
group_by("part","sex")
#mutate(###,
###
) %>% print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
### <Your call to group_by()> %>%
group_by("part","sex")  %>%
#mutate(###,
### )  %>%
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
### <Your call to group_by()> %>%
group_by("part","sex")  %>%
mutate(total = sum(count),
prop = count / total
)  %>%
print
submit()
submit()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 23, minutes = 32, seconds =05)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, 17, 34
)
depart <- update(depart, hours=17, minuts=34)
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- update(depart, hours=15, minutes=50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
setwd("/home/keith/Documents/Coursera/JHU-getdata-007/CourseProject/UCI HAR Dataset")
#delete this if not needed
#library(data.table)
#   ...should create one R script called run_analysis.R that does the following:
#
#   1 Merges the training and the test sets to create one data set.
#   2 Extracts only the measurements on the mean and standard deviation for each
#   measurement.
#   3 Uses descriptive activity names to name the activities in the data set
#   4 Appropriately labels the data set with descriptive variable names.
#   5 From the data set in step 4, creates a second, independent tidy data set
#   with the average of each variable for each activity and each subject.
#define file locations and names
#UCI HAR Dataset
#features.txt -file listing raw column names for data files X_train.txt
#subject_train.txt  -file of single column of data representing subjects
#X_train.txt  -sensor data
#y_train.txt  -activity list
#read features.txt to get column names
orig_feat <- read.table("features.txt",
col.names = c("col", "rawFieldName"),
sep = " ",
comment.char = "",
stringsAsFactors = FALSE
)
#select all fields with std or mean in the field name
#https://stackoverflow.com/questions/2193742/ways-to-read-only-select-columns-from-a-file-into-r-a-happy-medium-between-re?lq=1
# trick to read only selected columns is to specify colClass with "NULL"
is_mean_std <- grepl("std|mean", orig_feat$rawFieldName, ignore.case = TRUE)
mean_std_fieldnames <- orig_feat[is_mean_std, "rawFieldName"]
#create a vector with all "NULL" for each column in the original data
col_classes <- rep("NULL", 561)
#for columns you want to read put the field type instead of "NULL"
col_classes[is_mean_std] <- "numeric"
#read X_train.txt which contains the data
data <- read.table("train/X_train.txt",
colClasses = col_classes,  #where "NULL" col will not be read.
comment.char = ""
)
#append X_test.txt to data using rbind()
data <- rbind(data,
read.table("test/X_test.txt",
colClasses = col_classes,  #where "NULL" col will not be read.
comment.char = ""
)
)
colnames(data) <- mean_std_fieldnames
View(data)
#read y_train.txt which contains a single column of activity codes
activities <-       read.table("train/y_train.txt", col.names = "act_code")
activities <- rbind(activities,
read.table("test/y_test.txt",   col.names = "act_code"))
activity_labels <- read.table("activity_labels.txt",
col.names = c("act_code", "activity"),
stringsAsFactors = FALSE
)
activity  <- activity_labels[activities$act_code, "activity"]
#do some required calculation
data  <- cbind(activity, data)
View(data)
table(data)
summary(data)
class(summary(data))
view(summary(data))
View(summary(data))
data(mtcars)
mtcars
narrow <- mtcars[, c("cyl", "gear", "vs", "mpg")]
narrow
activity
mean_std_fieldnames
which(LETTERS == "R")
which(LETTERS > "R")
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
X <- X[sample(1:5),]
X$var2[c(1,3)] <- NA
X
X[X$var2>8,]
colMeans(data)
colMeans(data[,2:])
col.names(data)
col.Names(data)
colNames(data)
colnames(data)
colMeans(data[,2:87])
by(data, data[, 1], colMeans)
by(data[, 2:87], data[, 1], colMeans)
class(by(data[, 2:87], data[, 1], colMeans))
xtabs(mean ~ activity, data=data)
xtabs(mean ~ activity, data)
DF <- data
xtabs(mean ~ activity, DF)
str(DF)
xtabs(mean ~ activity, DF)
library(stats)
xtabs(mean ~ activity, DF)
xtabs(mean ~ ., DF)
class(DF)
xtabs(, DF)
DT <- data.table(DF)
library(data.table)
DT <- data.table(DF)
DT
DT[, mean(2), by=activity]
DT[, mean(), by=activity]
DT[, mean(mean_std_fieldnames), by=activity]
aggregate(data[c(mean_std_fieldnames)],
by = data[activity],
FUN=mean, na.rm=TRUE)
aggregate(data,
by = "activity",
FUN=mean, na.rm=TRUE)
aggregate(data[,c(mean_std_fieldnames)],
by = data$activity],
FUN=mean, na.rm=TRUE)
aggregate(data[,c(mean_std_fieldnames)],
by = data$activity,
FUN=mean, na.rm=TRUE)
aggregate(data[,c(mean_std_fieldnames)],
by = list(data$activity),
FUN=mean, na.rm=TRUE)
colMeans(data[, 2:87])
aggregate(data,
by = data[c("activity")],
FUN=mean, na.rm=TRUE)
aggregate(data[,c(mean_std_fieldnames)],
by = data[c("activity")],
FUN=mean, na.rm=TRUE)
DT <- data
DT <- data.table(data)
DT[,mean,by=activity]
DT[,mean(),by=activity]
DT[,mean(c(mean_std_fieldnames)),by=activity]
mean(DT)
mean(DT[,mean_std_fieldnames])
DT[,mean_std_fieldnames]
c(mean_std_fieldnames)
aggregate(data[,c(mean_std_fieldnames)],
by = data[c("activity")],
FUN=mean, na.rm=TRUE)
aggregate(data[,mean_std_fieldnames],
by = data[c("activity")],
FUN=mean, na.rm=TRUE)
library(plyr)
ddply(data, .(activity), numcolwise(mean))
colMeans(data[, 2:87],by=activity)
mean(DT[,mean_std_fieldnames])
data[,mean_std_fieldnames]
mean(data[,mean_std_fieldnames])
l
system.time(aggregate(data[,mean_std_fieldnames],
by = data[c("activity")],
FUN=mean, na.rm=TRUE)
)
system.time(ddply(data, .(activity), numcolwise(mean)))
system.time(DT[,mean(c(mean_std_fieldnames)),by=activity])
